/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
"use strict";

// The script parses api.md files, generated by the extract-api.js script (and subsequently the api-extractor.com tool), and extracts the high level API items
// into a csv format for easier review.

const path = require("node:path");
const argv = require("yargs").argv;
const fs = require("node:fs");

if (undefined === argv.apiSignature) {
  console.log("Missing apiSignature argument.");
  return;
}

if (!fs.existsSync(argv.apiSignature)) {
  console.log("The api signature file does not exist.");
  return;
}

if (undefined === argv.outDir) {
  console.log("Missing outDir argument.");
  return;
}

fs.mkdirSync(path.normalize(argv.outDir), { recursive: true });

// create output file
const apiSignatureFileName = path.parse(argv.apiSignature).name;
const sigFileName = apiSignatureFileName.split(".")[0];
const sigFilePath = path.join(argv.outDir, `${sigFileName}.exports.csv`);

const outputLines = [];
outputLines.push("sep=;");
outputLines.push("Release Tag;API Item Type;API Item Name");

// Open up the signature file
fs.readFile(argv.apiSignature, function (error, data) {
  if (error) {
    throw error;
  }

  let releaseTag = "";
  let deprecated = false;
  data
    .toString()
    .split("\n")
    .forEach(function (line, index, arr) {
      let match;
      if (!releaseTag) {
        match = line.match(/^\/\/ @(beta|alpha|public|internal)(?: @(deprecated))?/);
        if (match) {
          releaseTag = match[1];
          deprecated = !!match[2];
        }
        return;
      }

      match = line.match(/^export (\w+) (\w+)/);
      if (match) {
        outputLines.push(`${releaseTag};${match[1]};${match[2]}`);
        if (deprecated) {
          outputLines.push(`deprecated;${match[1]};${match[2]}`);
        }
      }
      releaseTag = "";
      deprecated = false;
    });
  fs.writeFileSync(sigFilePath, outputLines.join("\n"));
});
