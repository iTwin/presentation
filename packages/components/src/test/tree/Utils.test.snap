// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Utils createPartialTreeNodeItem uses provided callback to customize tree node 1`] = `
Object {
  "description": "custom-description",
  "icon": "custom-icon",
  "id": "",
  "key": Object {
    "pathFromRoot": Array [],
    "type": "",
    "version": 0,
  },
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "node_label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "test",
      "value": "test",
      "valueFormat": 0,
    },
  },
}
`;

exports[`Utils createTreeNodeItem appends grouped nodes count if requested 1`] = `
Object {
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
  "__presentation-components/key": Object {
    "className": "TestSchema:GroupedClass",
=======
  "id": "6102db55-652c-4aa1-ba19-db173124462c",
  "key": Object {
    "className": "CSS",
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
    "groupedInstancesCount": 999,
    "pathFromRoot": Array [
      "hash",
    ],
    "type": "ECClassGroupingNode",
    "version": 2,
  },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
  "id": "hash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "node_label",
      "typename": "composite",
    },
    "value": Object {
      "displayValue": "test (999)",
      "value": Object {
        "parts": Array [
          Object {
            "displayValue": "test",
            "rawValue": "test",
            "typeName": "string",
          },
          Object {
            "displayValue": "(999)",
            "rawValue": "(999)",
            "typeName": "string",
          },
        ],
        "separator": " ",
      },
      "valueFormat": 0,
    },
  },
}
`;

exports[`Utils createTreeNodeItem creates auto expanded tree node 1`] = `
Object {
  "checkBoxState": 1,
  "hasChildren": true,
  "icon": "Knolls",
  "id": "449df282-09dc-4ff6-9195-5c55e9e31699/6127f623-1285-4848-8bc1-c9d119fb96ab",
  "isCheckboxDisabled": true,
  "isCheckboxVisible": true,
  "key": Object {
    "instanceKeys": Array [
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
    ],
    "pathFromRoot": Array [
      "parentHash",
      "childHash",
    ],
    "type": "ECInstancesNode",
    "version": 2,
  },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
  "autoExpand": true,
  "description": "testDescription",
  "id": "childHash/parentHash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "node_label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "test label",
      "value": "test_label",
      "valueFormat": 0,
    },
  },
}
`;

exports[`Utils createTreeNodeItem creates tree node 1`] = `
Object {
  "__presentation-components/key": Object {
    "instanceKeys": Array [
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
    ],
    "pathFromRoot": Array [
      "parentHash",
      "childHash",
    ],
    "type": "ECInstancesNode",
    "version": 2,
  },
  "description": "testDescription",
  "id": "childHash/parentHash",
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "node_label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "test label",
      "value": "test_label",
      "valueFormat": 0,
    },
  },
}
`;

exports[`Utils createTreeNodeItem creates tree node with custom label styles 1`] = `
Object {
  "autoExpand": true,
  "description": "Consequuntur eum quaerat atque doloribus eum.",
  "hasChildren": true,
  "icon": "Cambridgeshire",
  "id": "a772c3d3-03a4-40a8-8a6a-8c62fda69701/ca2b1044-8007-4ce7-a4f6-d779f7dd0ef0",
  "key": Object {
    "instanceKeys": Array [
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
    ],
    "pathFromRoot": Array [
      "parentHash",
      "childHash",
    ],
    "type": "ECInstancesNode",
    "version": 2,
  },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
  "description": "testDescription",
  "id": "childHash/parentHash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "node_label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "test label",
      "value": "test_label",
      "valueFormat": 0,
    },
  },
  "style": Object {
    "isBold": true,
    "isItalic": true,
  },
}
`;

exports[`Utils createTreeNodeItem creates tree node with parent id 1`] = `
Object {
  "icon": "moderator",
  "id": "270da1a3-ba31-44ef-8866-c2a100d70bea/a389bc4e-ef0a-45d0-8b8b-62e60b80175c",
  "isCheckboxVisible": true,
  "key": Object {
    "instanceKeys": Array [
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
    ],
    "pathFromRoot": Array [
      "parentHash",
      "childHash",
    ],
    "type": "ECInstancesNode",
    "version": 2,
  },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
  "description": "testDescription",
  "id": "childHash/parentHash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "node_label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "test label",
      "value": "test_label",
      "valueFormat": 0,
    },
  },
  "parentId": "test_parent_id",
}
`;

exports[`Utils createTreeNodeItem uses provided callback to customize tree node 1`] = `
Object {
  "autoExpand": true,
  "description": "custom-description",
  "hasChildren": true,
  "icon": "custom-icon",
  "id": "346ddc01-cc61-4177-aa7e-cf3dfd8b3352/41098202-0113-4061-b4f4-6d7625fa7310",
  "key": Object {
    "instanceKeys": Array [
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
      Object {
        "className": "TestSchema:TestClass",
        "id": "0x1",
      },
    ],
    "pathFromRoot": Array [
      "parentHash",
      "childHash",
    ],
    "type": "ECInstancesNode",
    "version": 2,
  },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
  "description": "custom-description",
  "icon": "custom-icon",
  "id": "childHash/parentHash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "node_label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "test label",
      "value": "test_label",
      "valueFormat": 0,
    },
  },
}
`;

exports[`Utils createTreeNodeItems creates tree nodes 1`] = `
Array [
  Object {
    "autoExpand": true,
    "description": "Harum aut sit.",
    "hasChildren": true,
    "id": "d0490790-e52c-4185-a841-f2ddecb9648f/32e09daf-f7de-466e-95cc-f6b5e845ce78",
    "isCheckboxDisabled": true,
    "isCheckboxVisible": true,
    "key": Object {
      "instanceKeys": Array [
        Object {
          "className": "TestSchema:TestClass",
          "id": "0x1",
        },
        Object {
          "className": "TestSchema:TestClass",
          "id": "0x1",
        },
      ],
      "pathFromRoot": Array [
        "parentHash",
        "childHash",
      ],
      "type": "ECInstancesNode",
      "version": 2,
    },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
    "description": "testDescription",
    "id": "childHash/parentHash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
    "label": PropertyRecord {
      "property": Object {
        "displayLabel": "Label",
        "name": "node_label",
        "typename": "string",
      },
      "value": Object {
        "displayValue": "test label",
        "value": "test_label",
        "valueFormat": 0,
      },
    },
  },
  Object {
    "autoExpand": true,
    "checkBoxState": 1,
    "id": "908fcd9c-af25-4d63-bb21-a81337a8ad7e/08153750-f3da-4eab-b142-1892b75ef471",
    "isCheckboxDisabled": true,
    "isCheckboxVisible": true,
    "key": Object {
      "instanceKeys": Array [
        Object {
          "className": "TestSchema:TestClass",
          "id": "0x1",
        },
        Object {
          "className": "TestSchema:TestClass",
          "id": "0x1",
        },
      ],
      "pathFromRoot": Array [
        "parentHash",
        "childHash",
      ],
      "type": "ECInstancesNode",
      "version": 2,
    },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
    "description": "testDescription",
    "id": "childHash/parentHash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
    "label": PropertyRecord {
      "property": Object {
        "displayLabel": "Label",
        "name": "node_label",
        "typename": "string",
      },
      "value": Object {
        "displayValue": "test label",
        "value": "test_label",
        "valueFormat": 0,
      },
    },
  },
]
`;

exports[`Utils createTreeNodeItems creates tree nodes with parentId 1`] = `
Array [
  Object {
    "autoExpand": true,
    "description": "Ratione debitis sequi totam aut est nemo aut.",
    "hasChildren": true,
    "id": "c992c8d5-f776-46e2-957c-ff276d241866/9ca8debb-3f29-40e0-b8b0-0330fde07d2e",
    "key": Object {
      "instanceKeys": Array [
        Object {
          "className": "TestSchema:TestClass",
          "id": "0x1",
        },
        Object {
          "className": "TestSchema:TestClass",
          "id": "0x1",
        },
      ],
      "pathFromRoot": Array [
        "parentHash",
        "childHash",
      ],
      "type": "ECInstancesNode",
      "version": 2,
    },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
    "description": "testDescription",
    "id": "childHash/parentHash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
    "label": PropertyRecord {
      "property": Object {
        "displayLabel": "Label",
        "name": "node_label",
        "typename": "string",
      },
      "value": Object {
        "displayValue": "test label",
        "value": "test_label",
        "valueFormat": 0,
      },
    },
    "parentId": "test_parent_id",
  },
  Object {
    "description": "Aliquam rem ab quia consequatur magnam debitis.",
    "icon": "Unbranded Steel Keyboard",
    "id": "9e4f2bda-d7ba-42e4-affe-37f852bc8f5d/805abe6e-d9fc-4d7b-9a1c-500d4d5d63c0",
    "isCheckboxVisible": true,
    "key": Object {
      "instanceKeys": Array [
        Object {
          "className": "TestSchema:TestClass",
          "id": "0x1",
        },
        Object {
          "className": "TestSchema:TestClass",
          "id": "0x1",
        },
      ],
      "pathFromRoot": Array [
        "parentHash",
        "childHash",
      ],
      "type": "ECInstancesNode",
      "version": 2,
    },
<<<<<<< HEAD:packages/components/src/test/tree/Utils.test.snap
    "description": "testDescription",
    "id": "childHash/parentHash",
=======
>>>>>>> a1f270721b (Presentation: Add API to enable hierarchy levels filtering in tree (#4915)):presentation/components/src/test/tree/Utils.test.snap
    "label": PropertyRecord {
      "property": Object {
        "displayLabel": "Label",
        "name": "node_label",
        "typename": "string",
      },
      "value": Object {
        "displayValue": "test label",
        "value": "test_label",
        "valueFormat": 0,
      },
    },
    "parentId": "test_parent_id",
  },
]
`;
