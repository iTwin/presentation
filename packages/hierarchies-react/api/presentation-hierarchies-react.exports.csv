sep=;
Release Tag;API Item
beta;createTreeNode(node: PresentationTreeNode, isNodeSelected: (nodeId: string) => boolean): ReturnType
beta;HierarchyLevelConfiguration
beta;InfoNodeTypes = "ResultSetTooLarge" | "ChildrenPlaceholder" | "NoFilterMatchingNodes" | "Unknown"
beta;isPresentationHierarchyNode(node: PresentationTreeNode): node is PresentationHierarchyNode
beta;LocalizationContextProvider({ localization, children }: PropsWithChildren
beta;PresentationHierarchyNode
beta;PresentationInfoNode
beta;PresentationTreeNode = PresentationHierarchyNode | PresentationInfoNode
beta;TreeNodeRenderer({ node, expandNode, getIcon, setHierarchyLevelFilter, onFilterClick, onNodeClick, onNodeKeyDown, setHierarchyLevelLimit, isSelected, isDisabled, ...nodeProps }: TreeNodeRendererProps_2): JSX_2.Element
beta;TreeRenderer({ rootNodes, expandNode, selectNodes, isNodeSelected, setHierarchyLevelLimit, setHierarchyLevelFilter, onFilterClick, getIcon, selectionMode, localization, ...treeProps }: TreeRendererProps): JSX_2.Element
beta;UnifiedSelectionProvider({ storage, children }: PropsWithChildren
beta;useLocalizationContext(): LocalizationContext
beta;useSelectionHandler(props: UseSelectionHandlerProps): UseSelectionHandlerResult
beta;useTree(props: UseTreeProps): UseTreeResult
beta;useUnifiedSelectionTree({ imodelKey, sourceName, ...props }: UseTreeProps & Omit