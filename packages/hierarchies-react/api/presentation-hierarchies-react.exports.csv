sep=;
Release Tag;API Item
beta;createRenderedTreeNodeData(node: RenderedTreeNode, isNodeSelected: (nodeId: string) => boolean): NodeData
beta;HierarchyLevelDetails
beta;isPresentationHierarchyNode(node: PresentationTreeNode): node is PresentationHierarchyNode
beta;PresentationGenericInfoNode
beta;PresentationHierarchyNode
beta;PresentationInfoNode = PresentationGenericInfoNode | PresentationResultSetTooLargeInfoNode | PresentationNoFilterMatchesInfoNode
beta;PresentationResultSetTooLargeInfoNode
beta;PresentationTreeNode = PresentationHierarchyNode | PresentationInfoNode
beta;RenderedTreeNode = PresentationTreeNode |
beta;TreeNodeRenderer({ node, expandNode, getIcon, onFilterClick, onNodeClick, onNodeKeyDown, isSelected, isDisabled, actionButtonsClassName, getHierarchyLevelDetails, ...nodeProps }: TreeNodeRendererProps): JSX_2.Element
beta;TreeRenderer({ rootNodes, expandNode, selectNodes, isNodeSelected, onFilterClick, getIcon, getHierarchyLevelDetails, selectionMode, ...treeProps }: TreeRendererProps): JSX_2.Element
beta;UnifiedSelectionProvider({ storage, children }: PropsWithChildren
beta;useSelectionHandler(props: UseSelectionHandlerProps): UseSelectionHandlerResult
beta;useTree(props: UseTreeProps): UseTreeResult
beta;useUnifiedSelectionTree({ imodelKey, sourceName, ...props }: UseTreeProps & Omit